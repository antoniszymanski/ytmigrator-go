// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package internal

import (
	"context"
	"database/sql"
)

const hasSubscribed = `-- name: HasSubscribed :one
SELECT EXISTS (
		SELECT 1
		FROM "subscriptions"
		WHERE "url" = ?
	)
`

func (q *Queries) HasSubscribed(ctx context.Context, url sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, hasSubscribed, url)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const insertPlaylist = `-- name: InsertPlaylist :one
INSERT INTO "playlists" (
		"name",
		"is_thumbnail_permanent",
		"thumbnail_stream_id",
		"display_index"
	)
VALUES (?, 0, ?, -1)
RETURNING "uid"
`

type InsertPlaylistParams struct {
	Name              sql.NullString
	ThumbnailStreamID int64
}

func (q *Queries) InsertPlaylist(ctx context.Context, arg InsertPlaylistParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertPlaylist, arg.Name, arg.ThumbnailStreamID)
	var uid int64
	err := row.Scan(&uid)
	return uid, err
}

const insertPlaylistStreamJoin = `-- name: InsertPlaylistStreamJoin :exec
INSERT INTO "playlist_stream_join" (
		"playlist_id",
		"stream_id",
		"join_index"
	)
VALUES (?, ?, ?)
`

type InsertPlaylistStreamJoinParams struct {
	PlaylistID int64
	StreamID   int64
	JoinIndex  int64
}

func (q *Queries) InsertPlaylistStreamJoin(ctx context.Context, arg InsertPlaylistStreamJoinParams) error {
	_, err := q.db.ExecContext(ctx, insertPlaylistStreamJoin, arg.PlaylistID, arg.StreamID, arg.JoinIndex)
	return err
}

const insertStream = `-- name: InsertStream :one
INSERT INTO "streams" (
		"service_id",
		"url",
		"title",
		"stream_type",
		"duration",
		"uploader",
		"uploader_url",
		"thumbnail_url",
		"view_count",
		"textual_upload_date",
		"upload_date",
		"is_upload_date_approximation"
	)
VALUES (0, ?, ?, "VIDEO_STREAM", ?, ?, ?, ?, ?, ?, ?, 1)
RETURNING "uid"
`

type InsertStreamParams struct {
	Url               string
	Title             string
	Duration          int64
	Uploader          string
	UploaderUrl       sql.NullString
	ThumbnailUrl      sql.NullString
	ViewCount         sql.NullInt64
	TextualUploadDate sql.NullString
	UploadDate        sql.NullInt64
}

func (q *Queries) InsertStream(ctx context.Context, arg InsertStreamParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertStream,
		arg.Url,
		arg.Title,
		arg.Duration,
		arg.Uploader,
		arg.UploaderUrl,
		arg.ThumbnailUrl,
		arg.ViewCount,
		arg.TextualUploadDate,
		arg.UploadDate,
	)
	var uid int64
	err := row.Scan(&uid)
	return uid, err
}

const insertSubscription = `-- name: InsertSubscription :exec
INSERT INTO "subscriptions" (
		"service_id",
		"url",
		"name",
		"avatar_url",
		"subscriber_count",
		"description",
		"notification_mode"
	)
VALUES (0, ?, ?, ?, ?, ?, 0)
`

type InsertSubscriptionParams struct {
	Url             sql.NullString
	Name            sql.NullString
	AvatarUrl       sql.NullString
	SubscriberCount sql.NullInt64
	Description     sql.NullString
}

func (q *Queries) InsertSubscription(ctx context.Context, arg InsertSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, insertSubscription,
		arg.Url,
		arg.Name,
		arg.AvatarUrl,
		arg.SubscriberCount,
		arg.Description,
	)
	return err
}

const stream = `-- name: Stream :one
SELECT "uid"
FROM "streams"
WHERE "url" = ?
LIMIT 1
`

func (q *Queries) Stream(ctx context.Context, url string) (int64, error) {
	row := q.db.QueryRowContext(ctx, stream, url)
	var uid int64
	err := row.Scan(&uid)
	return uid, err
}
